import datetime
import json
import os

def generate_recognition_tree(tree, indent, debug = False):
  if debug:
    print(f"Generating recognition tree for {tree['name']}")

  isa = tree['name']
  identifiers = []
  recognizer = []
  def generate_recognition_tree_rec(node, indent):
    include_pattern = node['include']
    include_mask = include_pattern.replace('0', '1').replace('x', '0').replace('-', '0')
    include_value = include_pattern.replace('x', '0').replace('-', '0')
    include_condition = f"((data & 0b{include_mask}) == 0b{include_value})"
    recognizer.append(f"{' ' * indent}if ({include_condition}")

    exclude_pattern = node['exclude']
    exclude_mask = exclude_pattern.replace('0', '1').replace('x', '0').replace('-', '0')
    exclude_value = exclude_pattern.replace('x', '0').replace('-', '0')
    exclude_condition = f"((data & 0b{exclude_mask}) == 0b{exclude_value})"
    if exclude_mask.find('1') != -1:
       recognizer.append(f"&& !{exclude_condition}")

    recognizer.append(f") {{ // {node['name']}\n")

    if 'encname' in node:
      identifiers.append(node['encname'])
      recognizer.append(f"{' ' * (indent + 2)}return {isa}_ID::{node['name']};\n")
    else:
      for child in node['children']:
        generate_recognition_tree_rec(child, indent + 2)

    recognizer.append(f"{' ' * indent}}}\n")
  generate_recognition_tree_rec(tree, indent)

  if debug:
    print(f"Generated {len(identifiers)} identifiers")
    print(f"Generated {len(recognizer)} lines of recognizer code")

  return identifiers, recognizer

def generate_recognizer(tree, isa, debug = True):
  identifiers, recognizer = generate_recognition_tree(tree, 4, debug)
  timestamp = datetime.datetime.now()
  identifiers = sorted(identifiers)

  os.makedirs(f"Raiser", exist_ok = True)

  with \
    open(f'Raiser/{isa}Recognizer.h', 'w') as fh, \
    open(f'Raiser/{isa}Recognizer.cpp', 'w') as fcpp:
    fh.write(f"""
// This file was generated by {__file__} on {timestamp}
#ifndef {isa.upper()}RECOGNIZER_H
#define {isa.upper()}RECOGNIZER_H

#include <iostream>
#include <string>

namespace {isa} {{

  enum class {isa}_ID {{
    INVALID,
    """)
    fh.write(',\n    '.join(identifiers)) # Can't nest this in the f-string
    fh.write(f"""
  }};

  {isa}_ID recognize_{isa}(uint32_t data);
  std::string to_string_{isa}(const {isa}_ID& value);
  std::ostream& operator<<(std::ostream& os, const {isa}_ID& value);

}}

#endif // {isa.upper()}RECOGNIZER_H
""")

    fcpp.write(f"""
// This file was generated by {__file__} on {timestamp}
#include "{isa}Recognizer.h"

namespace {isa} {{

  {isa}_ID recognize_{isa}(uint32_t data) {{
{''.join(recognizer)}
    return {isa}_ID::INVALID;
  }}

  std::string to_string_{isa}(const {isa}_ID& value) {{
    switch (value) {{
      """)
    fcpp.write('\n      '.join(f'case {isa}_ID::{identifier}: return "{identifier}";' for identifier in identifiers)) # Can't nest this in the f-string
    fcpp.write(f"""
      default: return "INVALID";
    }}
  }}

  std::ostream& operator<<(std::ostream& os, const {isa}_ID& value) {{
    return os << to_string_{isa}(value);
  }}
}}
""")

if __name__ == "__main__":
  with open("./a32_encoding.json", "r") as f:
    encoding = json.load(f)
  generate_recognizer(encoding, "A32")
  with open("./t32_encoding.json", "r") as f:
    encoding = json.load(f)
  generate_recognizer(encoding, "T32")
